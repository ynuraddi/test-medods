// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/smtp/smtp.go

// Package mock_smtp is a generated GoMock package.
package mock_smtp

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// SendLoginFromNewIP mocks base method.
func (m *MockInterface) SendLoginFromNewIP(ip, to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLoginFromNewIP", ip, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendLoginFromNewIP indicates an expected call of SendLoginFromNewIP.
func (mr *MockInterfaceMockRecorder) SendLoginFromNewIP(ip, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLoginFromNewIP", reflect.TypeOf((*MockInterface)(nil).SendLoginFromNewIP), ip, to)
}

// SendMail mocks base method.
func (m *MockInterface) SendMail(subject, body string, to ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{subject, body}
	for _, a := range to {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMail", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMail indicates an expected call of SendMail.
func (mr *MockInterfaceMockRecorder) SendMail(subject, body interface{}, to ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{subject, body}, to...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMail", reflect.TypeOf((*MockInterface)(nil).SendMail), varargs...)
}
